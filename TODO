  Yeti TODO.
~~~~~~~~~~~~~~~~~

* Write reference grammar for documentation.
* v1.0
* Allow optional ~ before classname in instanceof and friends.
* Look why threadLocal has 'a instead of '_a in REPL,
  although it has '_a in the std.yeti source.
* Typedefs in REPL
* Compiling simple module a; in REPL results in ClassNotFoundException
* Foreign structs (java dto -> struct?)
* Operator to copy mutable structure fields between two different structures
* Support as in type definitions for recursive types
* Dependency analyses on struct field self-bindings?
  (could be done by binding only free typevars first and
   unifing those with actual function field types later)
  + structType should use asLambda instead of == "lambda"
* Reuse local JVM variables (have a free var list on Ctx and add variable
  to it after last use when it could be nulled). This could compact code
  and help GC with bindings that are not explicitly nulled (type != MAP).
* foo = load bar; foo.x should be optimised into same as load bar; x
* Context-specific int optimizations for builtins
  (and java method invocation return values)
* Ability to override struct class toString would be probably useful,
  for example by defining special property like { get as string () = "hi!" }
* Struct mapping (as in doc/stmap.yeti)
* Allow cons pattern match (::) on arrays?
* Have fall keyword in case to jump to checking next pattern.
* Exhaustive list match detection probably could be improved by something
  like introducing FL_EMPTY_PATTERN and keeping account about the list tail
  being exhaustive.
* import foo.Bar; Bar$Baz could resolve
  to foo.Bar$Baz instead of current.package.Bar$Baz
* Support A x | B y | variantTypeDef?
* Review the Java<->Yeti type autoconversions?
* Immutable tree map support - this seems to be popular feature. ;)
* Support module field deprecation
* Optional Java generics support?
* Direct struct-ref optimisation, when only known structs are accessed
